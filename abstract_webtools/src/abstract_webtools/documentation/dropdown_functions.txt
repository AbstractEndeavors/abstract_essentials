#### **Functions**:

- ##### `get_status(url:str) -> int`
    - **Purpose**: Gets the HTTP status code of the given URL.
    - **Arguments**:
- `url`: The URL to check the status of.
    - **Returns**: The HTTP status code of the URL, or None if the request fails.

- ##### `clean_url(url:str) -> list`
    - **Purpose**: Cleans the given URL and returns a list of possible variations.
    - **Arguments**:
        - `url`: The URL to clean.
    - **Returns**: A list of possible URL variations, including 'http://' and 'https://' prefixes.

- ##### `get_correct_url(url: str, session: type(requests.Session) = requests) -> (str or bool)`
    - **Purpose**: Gets the correct URL from the possible variations by trying each one with an HTTP request.
    - **Arguments**:
      - `url`: The URL to find the correct version of.
      - `session`: The requests session to use for making HTTP requests. Defaults to requests.
    - **Returns**: The correct version of the URL if found, or None if none of the variations are valid.

- ##### `try_request(url: str, session: type(requests.Session) = requests) -> (str or bool)`
    - **Purpose**: Tries to make an HTTP request to the given URL using the provided session.
    - **Arguments**:
      - `url`: The URL to make the request to.
      - `session`: The requests session to use for making HTTP requests. Defaults to requests.
    - **Returns**: The response object if the request is successful, or None if the request fails.

- ##### `is_valid(url:str) -> bool`
    - **Purpose**: Checks whether `url` is a valid URL.
    - **Arguments**:
      - `url`: The URL to check.
    - **Returns**: True if the URL is valid, False otherwise.

- ##### `desktop_user_agents() -> list`
    - **Purpose**: Returns a list of popular desktop user-agent strings for various browsers.
    - **Returns**: A list of desktop user-agent strings.

- ##### `get_user_agent(user_agent=desktop_user_agents()[0]) -> dict`
    - **Purpose**: Returns the user-agent header dictionary with the specified user-agent.
    - **Arguments**:
      - `user_agent`: The user-agent string to be used. Defaults to the first user-agent in the list.
    - **Returns**: A dictionary containing the 'user-agent' header.
    
#### **Classes**:

- ##### `TLSAdapter(HTTPAdapter: int)`
    - **Description**: A custom HTTPAdapter class that sets TLS/SSL options and ciphers.
    - **Attributes**:
      - `ssl_options (int)`: The TLS/SSL options to use when creating the SSL context.
    - **Methods**:
        - `ssl_options(self) -> int`
            - **Purpose**: Returns the SSL options to be used when creating the SSL context.
            - **Returns**: The SSL options.
        - `__init__(self, ssl_options:int=0, *args, **kwargs) -> None`
            - **Purpose**: Initializes the TLSAdapter with the specified SSL options.
            - **Arguments**:
                - `ssl_options (int, optional)`: The TLS/SSL options to use when creating the SSL context. Defaults to 0.
        - `add_string_list(self, ls: (list or str), delim: str = '', string: str = '') -> str`
            - **Purpose**: Concatenates the elements of a list into a single string with the given delimiter.
            - **Arguments**:
                - `ls (list or str)`: The list of elements or a comma-separated string.
                - `delim (str, optional)`: The delimiter to use when concatenating elements. Defaults to an empty string.
                - `string (str, optional)`: The initial string to append elements. Defaults to an empty string.
            - **Returns**: The concatenated string.
        - `get_ciphers(self) -> list`
            - **Purpose**: Returns a list of preferred TLS/SSL ciphers.
            - **Returns**: A list of TLS/SSL ciphers.
        - `create_ciphers_string(self, ls: list = None) -> str`
            - **Purpose**: Creates a colon-separated string of TLS/SSL ciphers from a list of ciphers.
            - **Arguments**:
                - `ls (list, optional)`: The list of TLS/SSL ciphers to use. Defaults to None, in which case it uses the default list.
            - **Returns**: The colon-separated string of TLS/SSL ciphers.
        - `init_poolmanager(self, *args, **kwargs) -> None`
            - **Purpose**: Initializes the pool manager with the custom SSL context and ciphers.
            - **Description**: This method leverages the given TLS/SSL ciphers and options to set up the pool manager with an appropriate SSL context.

- ##### `get_Source_code(url: str = 'https://www.example.com', user_agent= desktop_user_agents()[0]) -> str`
    - **Purpose**: Fetches the source code of the specified URL using a custom user-agent.
    - **Arguments**:
      - `url (str, optional)`: The URL to fetch the source code from. Defaults to 'https://www.example.com'.
      - `user_agent (str, optional)`: The user-agent to use for the request. Defaults to the first user-agent in the list.
    - **Returns**: The source code of the URL if the request is successful, or None if the request fails.

- ##### `parse_react_source(url:str) -> list`
    - **Purpose**: Fetches the source code of the specified URL and extracts JavaScript and JSX source code (React components).
    - **Arguments**:
      - `url (str)`: The URL to fetch the source code from.
    - **Returns**: A list of strings containing JavaScript and JSX source code found in <script> tags.

- ##### `get_all_website_links(url:str) -> list`
    - **Purpose**: Returns all URLs that are found on the specified URL and belong to the same website.
    - **Arguments**:
      - `url (str)`: The URL to search for links.
    - **Returns**: A list of URLs that belong to the same website as the specified URL.

- ##### `parse_all(url:str) -> dict`
    - **Purpose**: Parses the source code of the specified URL and extracts information about HTML elements, attribute values, attribute names, and class names.
    - **Arguments**:
      - `url (str)`: The URL to fetch the source code from.
    - **Returns**: A dict containing keys: [element_types, attribute_values, attribute_names, class_names] with values as lists for keys element types, attribute values, attribute names, and class names found in the source code.

- ##### `extract_elements(url:str=None, source_code:str=None, element_type=None, attribute_name=None, class_name=None) -> list`
    - **Purpose**: Extracts portions of the source code from the specified URL based on provided filters.
    - **Arguments**:
      - `url (str, optional)`: The URL to fetch the source code from.
      - `source_code (str, optional)`: The source code of the desired domain.
      - `element_type (str, optional)`: The HTML element type to filter by. Defaults to None.
      - `attribute_name (str, optional)`: The attribute name to filter by. Defaults to None.
      - `class_name (str, optional)`: The class name to filter by. Defaults to None.
    - **Returns**:  list: A list of strings containing portions of the source code that match the provided filters, or None if url and source_code are not provided.

